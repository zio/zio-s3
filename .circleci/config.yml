version: 2.1

scala_212: &scala_212
  SCALA_VERSION: 2.12.11

scala_213: &scala_213
  SCALA_VERSION: 2.13.1

jdk_8: &jdk_8
  JDK_VERSION: 8

jdk_11: &jdk_11
  JDK_VERSION: 11

tags_filter: &tags_filter
  tags:
    only: /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/

machine_ubuntu: &machine_ubuntu
  machine:
    image: ubuntu-1604:201903-01

install_jdk: &install_jdk
  - run:
      name: Install JDK
      command: |
        while $(ps aux | grep -i ' apt ' | grep -v grep > /dev/null); do sleep 1; done # Wait for apt to be ready
        sudo add-apt-repository ppa:openjdk-r/ppa -y
        sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 78BD65473CB3BD13
        sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 5DC22404A6F9F1CA

        sudo apt update
        sudo apt install openjdk-${JDK_VERSION}-jdk -y

load_cache: &load_cache
  - restore_cache:
      key: sbt-s3-cache

save_cache: &save_cache
  - save_cache:
      key: sbt-s3-cache
      paths:
        - "~/.ivy2/cache"
        - "~/.sbt"
        - "~/.m2"
        - "~/.cache"
        - "~/website/node_modules"

clean_cache: &clean_cache
  - run:
      name: Clean unwanted files from cache
      command: |
        rm -fv $HOME/.ivy2/.sbt.ivy.lock
        find $HOME/.ivy2/cache -name "ivydata-*.properties" -print -delete
        find $HOME/.sbt        -name "*.lock"               -print -delete

lint: &lint
  steps:
    - checkout
    - <<: *load_cache
    - <<: *install_jdk
    - run:
        name: Lint code
        command: ./sbt ++${SCALA_VERSION}! check
    - <<: *save_cache

test: &test
  steps:
    - checkout
    - <<: *load_cache
    - <<: *install_jdk
    - run:
        name: Run tests
        command: |
          docker-compose up -d
          ./sbt ++${SCALA_VERSION}! test
    - <<: *save_cache

release: &release
  steps:
    - checkout
    - run:
        name: Fetch git tags
        command: git fetch --tags
    - <<: *load_cache
    - run: 
        name: Write PGP public key
        command: echo -n "${PGP_PUBLIC}" | base64 -di > /tmp/public.asc
    - run: 
        name: Write PGP secret key
        command: echo -n "${PGP_SECRET}" | base64 -di > /tmp/secret.asc
    - run: 
        name: Write Sonatype credentials
        command: echo "credentials += Credentials(\"Sonatype Nexus Repository Manager\", \"oss.sonatype.org\", \"$SONATYPE_USER\", \"$SONATYPE_PASSWORD\")" > ~/.sbt/1.0/sonatype.sbt
    - run: 
        name: Release artifacts
        command: |
          mkdir -p $HOME/bin
          sudo apt-get update && sudo apt-get -y install gnupg2
          echo pinentry-mode loopback >> ~/.gnupg/gpg.conf
          echo allow-loopback-pinentry >> ~/.gnupg/gpg-agent.conf
          chmod 600 ~/.gnupg/*
          ln -s /usr/bin/gpg2 $HOME/bin/gpg
          $HOME/bin/gpg --version
          echo RELOADAGENT | gpg-connect-agent
          echo $PGP_SECRET | base64 -di | gpg2 --import --no-tty --batch --yes
          PATH=$HOME/bin:$PATH ./sbt ++${SCALA_VERSION}! ci-release

mdoc: &mdoc
  steps:
    - checkout
    - <<: *load_cache
    - run:
        name: Generate documentation
        command: |
          ./sbt doc
          ./sbt ++${SCALA_VERSION}! docs/mdoc
    - <<: *save_cache

install_yarn: &install_yarn
  - run:
      name: Install Yarn
      command: |
        curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
        sudo bash -c 'echo "deb https://dl.yarnpkg.com/debian/ stable main" > /etc/apt/sources.list.d/yarn.list'
        sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 78BD65473CB3BD13
        sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 5DC22404A6F9F1CA
        sudo apt update && sudo apt install yarn -y
        yarn policies set-version
        yarn -v

install_nodejs: &install_nodejs
  - run:
      name: Install node.js
      command: |
        export NVM_DIR="/opt/circleci/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        nvm install
        nvm use
        node -v

microsite: &microsite
  steps:
    - add_ssh_keys:
        fingerprints:
          - "b0:70:84:70:c9:31:62:54:1f:29:49:4d:22:4d:e2:eb"
    - checkout
    - <<: *load_cache
    - <<: *install_nodejs
    - <<: *install_yarn
    - run:
        name: Publishing website
        command: |
          git config --global user.email "${GH_NAME}@users.noreply.github.com"
          git config --global user.name "${GH_NAME}"
          export GIT_USER=${GH_NAME}
          export TRAVIS_BUILD_NUMBER="${CIRCLE_BUILD_NUM}"
          export TRAVIS_COMMIT="${CIRCLE_SHA1}"
          sudo chown -R $USER:$USER /tmp
          export NVM_DIR="/opt/circleci/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm install
          nvm use
          node -v
          ./sbt ++${SCALA_VERSION}! docs/docusaurusCreateSite
          ./sbt ++${SCALA_VERSION}! docs/docusaurusPublishGhpages
    - <<: *clean_cache
    - <<: *save_cache

jobs:
  mdoc:
    <<: *mdoc
    <<: *machine_ubuntu
    environment:
      - <<: *scala_212
      - <<: *jdk_8

  lint:
    <<: *lint
    <<: *machine_ubuntu
    environment:
      - <<: *scala_212
      - <<: *jdk_8

  test_212_jdk8:
    <<: *test
    <<: *machine_ubuntu
    environment:
      - <<: *scala_212
      - <<: *jdk_8

  test_212_jdk11:
    <<: *test
    <<: *machine_ubuntu
    environment:
      - <<: *scala_212
      - <<: *jdk_11

  test_213_jdk8:
    <<: *test
    <<: *machine_ubuntu
    environment:
      - <<: *scala_213
      - <<: *jdk_8

  test_213_jdk11:
    <<: *test
    <<: *machine_ubuntu
    environment:
      - <<: *scala_213
      - <<: *jdk_11

  release:
    <<: *release
    <<: *machine_ubuntu
    environment:
      - <<: *scala_213
      - <<: *jdk_8

  microsite:
    <<: *microsite
    <<: *machine_ubuntu
    environment:
      - <<: *scala_212
      - <<: *jdk_8

workflows:
  version: 2
  build:
    jobs:
      - lint:
          filters:
            <<: *tags_filter
      - mdoc:
          requires:
            - lint
          filters:
            <<: *tags_filter
      - test_212_jdk8:
          requires:
            - lint
          filters:
            <<: *tags_filter
      - test_212_jdk11:
          requires:
            - lint
          filters:
            <<: *tags_filter
      - test_213_jdk8:
          requires:
            - lint
          filters:
            <<: *tags_filter
      - test_213_jdk11:
          requires:
            - lint
          filters:
            <<: *tags_filter
      - release:
          context: Sonatype2
          requires:
            - mdoc
            - test_212_jdk8
            - test_212_jdk11
            - test_213_jdk8
            - test_213_jdk11          
          filters:
            <<: *tags_filter
            branches:
              only:
                - master
      - microsite:
          context: Website
          requires:
            - release
          filters:
            <<: *tags_filter
            branches:
              ignore: /.*/
